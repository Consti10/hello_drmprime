//da->fb_handle=de->drm_fd;
    //    void *dev=NULL;
    //    ret=drmModePageFlip(de->drm_fd,de->setup.crtcId,da->fb_handle,
    //                        0, nullptr);


#if 1 && TRACE_ALL
        fprintf(stderr, "%dx%d, fmt: %x, boh=%d,%d,%d,%d, pitch=%d,%d,%d,%d,"
               " offset=%d,%d,%d,%d, mod=%llx,%llx,%llx,%llx\n",
               av_frame_cropped_width(frame),
               av_frame_cropped_height(frame),
               desc->layers[0].format,
               bo_handles[0],
               bo_handles[1],
               bo_handles[2],
               bo_handles[3],
               pitches[0],
               pitches[1],
               pitches[2],
               pitches[3],
               offsets[0],
               offsets[1],
               offsets[2],
               offsets[3],
               (long long)modifiers[0],
               (long long)modifiers[1],
               (long long)modifiers[2],
               (long long)modifiers[3]
              );
#endif


 &da->fb_handle, DRM_MODE_FB_MODIFIERS /** 0 if no mods */) != 0) {

/*XAVFrame *frame;

        do_sem_wait(&de->q_sem_in, 0);

        if (de->q_terminate)
            break;

        frame = de->q_next;
        de->q_next = NULL;
        avgDisplayThreadQueueLatency.addUs(getTimeUs()-frame->pts);
        avgDisplayThreadQueueLatency.printInIntervals(CALCULATOR_LOG_INTERVAL);
        //frame->pts=getTimeUs();
        sem_post(&de->q_sem_out);

        do_display(de, frame);*/
        /*if (de->q_terminate)
            break;
        auto tmp=de->queue.popIfAvailable();
        if(tmp){
            do_display(de,tmp->frame);
        }*/

/*Xret = do_sem_wait(&de->q_sem_out, !de->show_all);
    if (ret) {
        av_frame_free(&frame);
    } else {
        de->q_next = frame;
        sem_post(&de->q_sem_in);
    }*/

// get the most recently added element (if there is any)
    // and then reduce the queue size to 0
    std::shared_ptr<T> getMostRecentIfAvailable(int& countDropped){
        std::lock_guard<std::mutex> lock(mutex_);
        if (queue_.empty()) {
            return std::shared_ptr<T>(nullptr);
        }
        auto tmp=queue_.back();
        while(!queue_.empty()) {
            queue_.pop();
            countDropped++;
        }
        return tmp;
    }


/*for (int k = 0; k < width; ++k) {
            const int off = offsetStride + k * 4;
            *(uint32_t*)&dest[off] =rgb;
        }*/

// This was in the original code, but it won't have an effect anyways since swapping the fb aparently does VSYNC anyways nowadays
static void waitForVSYNC(DRMPrimeOut *const de){
    chronoVsync.start();
    drmVBlank vbl = {
            .request = {
                    // Consti10: I think to get the next VBLANK, we need to set sequence to 1
                    // https://docs.nvidia.com/jetson/l4t-graphics/group__direct__rendering__manager.html#gadc9d79f4d0195e60d0f8c9665da5d8b2
                    .type = DRM_VBLANK_RELATIVE,
                    //.sequence = 0
                    .sequence = 1
            }
    };
    /*while (drmWaitVBlank(de->drm_fd, &vbl)) {
        if (errno != EINTR) {
            // This always fails - don't know why
            //fprintf(stderr, "drmWaitVBlank failed: %s\n", ERRSTR);
            break;
        }
    }*/
    const int ret=drmWaitVBlank(de->drm_fd,&vbl);
    if(ret!=0){
        fprintf(stderr, "drmWaitVBlank failed:%d  %s\n",ret, ERRSTR);
    }
    chronoVsync.stop();
    chronoVsync.printInIntervals(CALCULATOR_LOG_INTERVAL);
}

//static void consti10_copy_into_curr_fb(drmprime_out_env_t *const de,AVFrame* frame,drm_aux_t *da){
//}
/*static void consti10_page_flip(drmprime_out_env_t *const de,drm_aux_t *da,AVFrame *frame){
    if (drmPrimeFDToHandle(de->drm_fd, desc->objects[0].fd, da->bo_handles) != 0) {
        fprintf(stderr, "drmPrimeFDToHandle[%d](%d) failed: %s\n", 0, desc->objects[0].fd, ERRSTR);
        return -1;
    }

    drmModePageFlip(de->drm_fd,de->setup.crtcId,da->fb_handle,DRM_MODE_PAGE_FLIP_EVENT | DRM_MODE_PAGE_FLIP_ASYNC,de);
}*/
if (mXOptions.deinterlace) {
        if (init_filters(video, decoder_ctx, "deinterlace_v4l2m2m") < 0) {
            fprintf(stderr, "Failed to init deinterlace\n");
            return -1;
        }
    }

if(countLol>20){
        fprintf(stderr,"de->setup.crtcId: %d da->fb_handle: %d",de->setup.crtcId,da->fb_handle);
        // https://github.com/raspberrypi/linux/blob/aeaa2460db088fb2c97ae56dec6d7d0058c68294/drivers/gpu/drm/drm_ioctl.c#L686
        // https://github.com/raspberrypi/linux/blob/rpi-5.10.y/drivers/gpu/drm/drm_plane.c#L1044
        //DRM_MODE_PAGE_FLIP_EVENT
        /*if(drmModePageFlip(de->drm_fd,de->setup.crtcId,da->fb_handle,0,de)!=0){
            fprintf(stderr, "drmModePageFlip failed: %s %d\n", ERRSTR, errno);
            return -1;
        }else{
            fprintf(stderr, "drmModePageFlip success\n");
        }*/
        drmModeConnectorPtr xConnector=drmModeGetConnector(de->drm_fd,de->setup.conId);
        MLOGD<<"de->con_id:"<<de->con_id<<" de->setup.conId"<<de->setup.conId<<" actual connector"<<xConnector<<"\n";
        uint32_t connectors[1];
        connectors[0]=(uint32_t)de->con_id;
        if(drmModeSetCrtc(de->drm_fd,de->setup.crtcId,da->fb_handle,0,0,connectors,1,NULL)!=0){
            fprintf(stderr, "drmModeSetCrtc failed: %s %d\n", ERRSTR, errno);
        }else{
            fprintf(stderr, "drmModeSetCrtc success\n");
        }
    }else{
    }
if (type == AV_HWDEVICE_TYPE_NONE) {
		fprintf(stderr, "Device type %s is not supported.\n", hwdev);
		fprintf(stderr, "Available device types:");
		while((type = av_hwdevice_iterate_types(type)) != AV_HWDEVICE_TYPE_NONE)
			fprintf(stderr, " %s", av_hwdevice_get_type_name(type));
		fprintf(stderr, "\n");
		return -1;
	}
fprintf(stdout, "Found hw device type name: [%s]\n", av_hwdevice_get_type_name(kAvhwDeviceType));

// Apparently ffmpeg is not thread safe, doesn't work
void EGLOut::set_codec_context(AVCodecContext *avctx1) {
  this->avctx=avctx1;
}
void EGLOut::fetch_latest_frame() {
  if(avctx== nullptr)return;
  AVFrame *frame = nullptr;
  if (!(frame = av_frame_alloc())) {
	std::cerr<<"Fetch latest frame -> cannot alloc frame\n";
	return;
  }
  auto ret = avcodec_receive_frame(avctx, frame);
  if(ret==0){
	std::cout<<"Fetch latest frame - success\n";
	queue_new_frame_for_display(frame);
  } else{
	std::cout<<"Didn't get a new frame: "<<ret<<"\n";
  }
  av_frame_free(&frame);
}

static void fill_image(AVFrame* frame,int i,int y,int x){
  // Y
  for (y = 0; y < frame->height; y++) {
	for (x = 0; x < frame->width; x++) {
	  frame->data[0][y * frame->linesize[0] + x] = x + y + i * 3;
	}
  }
  // Cb and Cr
  for (y = 0; y < frame->height / 2; y++) {
	for (x = 0; x < frame->width / 2; x++) {
	  frame->data[1][y * frame->linesize[1] + x] = 128 + y + i * 2;
	  frame->data[2][y * frame->linesize[2] + x] = 64 + x + i * 5;
	}
  }
}

static void map_frame_test(AVFrame* frame){
  	static std::unique_ptr<std::vector<uint8_t>> copyBuffer=std::make_unique<std::vector<uint8_t>>(1920*1080*10);
    MLOGD<<"map_frame_test\n";
    MLOGD<<"Frame W:"<<frame->width<<" H:"<<frame->height
    <<" Cropped W:"<<x_av_frame_cropped_width(frame)<<" H:"<<x_av_frame_cropped_height(frame)<<"\n";
    mmapBuffer.start();
    const AVDRMFrameDescriptor *desc = (AVDRMFrameDescriptor *)frame->data[0];
    MMapFrame mapFrame(frame);
    copyMmappedBuffer.start();
    //memcpy(copyBuffer->data(),buffMapped,obj->size);
    memcpy_uint8(copyBuffer->data(),mapFrame.map,mapFrame.map_size);
    copyMmappedBuffer.stop();
    copyMmappedBuffer.printInIntervals(CALCULATOR_LOG_INTERVAL);
    mapFrame.unmap();
    mmapBuffer.stop();
    mmapBuffer.printInIntervals(CALCULATOR_LOG_INTERVAL);
}

  /*for(int i=0;i<3;i++){
	if(yuv_420_p_sw_frame_texture.textures[i]==0){
	  glGenTextures(1,&yuv_420_p_sw_frame_texture.textures[i]);
	  assert(yuv_420_p_sw_frame_texture.textures[i]>0);
	}
	GL_shaders::checkGlError("Xupload YUV420P");
	const auto test_texture_target=GL_TEXTURE_2D;
	//const auto test_texture_target=GL_TEXTURE_RECTANGLE_NV;
	glBindTexture(test_texture_target, yuv_420_p_sw_frame_texture.textures[i]);
	glTexParameteri(test_texture_target, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameteri(test_texture_target, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
	//bool use_tex_sub_image= false;
	if(yuv_420_p_sw_frame_texture.last_width==frame->width &&
		yuv_420_p_sw_frame_texture.last_height==frame->height){
	  //use_tex_sub_image= true;
	}else{
	  yuv_420_p_sw_frame_texture.last_width=frame->width;
	  yuv_420_p_sw_frame_texture.last_height=frame->height;
	}
	if(i==0){
	  // Full Y plane
	  if(use_tex_sub_image){
		glTexSubImage2D(test_texture_target,0,0,0,frame->width,frame->height,GL_LUMINANCE,GL_UNSIGNED_BYTE,frame->data[0]);
	  }else{
		glTexImage2D(test_texture_target, 0, GL_LUMINANCE, frame->width, frame->height, 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, frame->data[0]);
	  }
	}else{
	  // half size U,V planes
	  const int frame_width=frame->format==AV_PIX_FMT_YUV420P ? frame->width / 2 : frame->width;
	  const int frame_height=frame->height / 2;
	  if(use_tex_sub_image){
		glTexSubImage2D(test_texture_target, 0,0,0, frame_width, frame_height, GL_LUMINANCE, GL_UNSIGNED_BYTE, frame->data[i]);
	  } else{
		glTexImage2D(test_texture_target, 0, GL_LUMINANCE, frame_width, frame_height, 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, frame->data[i]);
	  }
	}
	glBindTexture(GL_TEXTURE_2D,0);
  }*/